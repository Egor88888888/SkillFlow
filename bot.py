import sqlite3
import re
from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = 6922033571
BOT_TOKEN = "7947398382:AAGYlrBiLsgKFCyFUsqRAfzWhOi8qORLQi8"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("skillflow.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    skills TEXT,
    phone TEXT,
    email TEXT,
    balance INTEGER DEFAULT 2
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS services (
    service_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    description TEXT,
    cost INTEGER,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,
    sender_id INTEGER,
    recipient_id INTEGER,
    amount INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard(is_admin=False):
    if is_admin:
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏")],
            [KeyboardButton("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º"), KeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")],
            [KeyboardButton("üí∞ –õ–æ–≥ —Å–¥–µ–ª–æ–∫"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üë§ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")],
            [KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏"), KeyboardButton("üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å Flow-—á–∞—Å—ã")],
            [KeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_registered(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *SkillFlow* ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å!",
            reply_markup=main_menu_keyboard(is_admin=True)
        )
    elif is_registered(user_id):
        await update.message.reply_text(
            "üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=main_menu_keyboard()
        )
    else:
        context.user_data["registration_step"] = "full_name"
        await update.message.reply_text(
            "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SkillFlow!* ‚ú®\n\n"
            "SkillFlow ‚Äî —ç—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –≥–¥–µ *–≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏* —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è *–≤–∞—à–µ–π –≤–∞–ª—é—Ç–æ–π*!\n\n"
            "üîπ *–ß—Ç–æ —Ç–∞–∫–æ–µ Flow-—á–∞—Å?*\n"
            "Flow-—á–∞—Å ‚Äî —ç—Ç–æ –µ–¥–∏–Ω–∏—Ü–∞ –æ–±–º–µ–Ω–∞ –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –æ–¥–Ω–æ–º—É —á–∞—Å—É –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏.\n\n"
            "üåü *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
            "1Ô∏è‚É£ *–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å* –∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö.\n"
            "2Ô∏è‚É£ *–î–æ–±–∞–≤–ª—è–π—Ç–µ —É—Å–ª—É–≥–∏* –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ Flow-—á–∞—Å–∞—Ö.\n"
            "3Ô∏è‚É£ *–ü–æ–ª—É—á–∞–π—Ç–µ Flow-—á–∞—Å—ã*, –æ–∫–∞–∑—ã–≤–∞—è —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
            "4Ô∏è‚É£ *–¢—Ä–∞—Ç—å—Ç–µ Flow-—á–∞—Å—ã* –Ω–∞ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –≤–∞–º!\n\n"
            "üí° *–ü—Ä–∏–º–µ—Ä:*\n"
            "–ê–Ω–Ω–∞ –æ–±—É—á–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ *2 Flow-—á–∞—Å–∞*. –ò–≤–∞–Ω –Ω–∞–Ω–∏–º–∞–µ—Ç –ê–Ω–Ω—É –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫–∏ —Å–≤–æ–∏–º–∏ Flow-—á–∞—Å–∞–º–∏. –ó–∞—Ç–µ–º –ê–Ω–Ω–∞ —Ç—Ä–∞—Ç–∏—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Flow-—á–∞—Å—ã –Ω–∞ —É—Å–ª—É–≥–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–∞–π—Ç–∞.\n\n"
            "üöÄ *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).",
            parse_mode=ParseMode.MARKDOWN
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message.text.strip()
    step = context.user_data.get("registration_step")

    if step == "full_name":
        if len(message.split()) < 2:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ø–æ–ª–Ω–æ–µ –∏–º—è* (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).", parse_mode=ParseMode.MARKDOWN)
            return
        context.user_data["full_name"] = message
        context.user_data["registration_step"] = "skills"
        await update.message.reply_text(
            f"üõ† –û—Ç–ª–∏—á–Ω–æ, *{message}*! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ —É—Å–ª—É–≥–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –î–∏–∑–∞–π–Ω)",
            parse_mode=ParseMode.MARKDOWN
        )
    elif step == "skills":
        if len(message) < 3:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫.")
            return
        context.user_data["skills"] = message
        context.user_data["registration_step"] = "phone"
        await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +71234567890).", parse_mode=ParseMode.MARKDOWN)
    elif step == "phone":
        if not re.match(r"^\+\d{10,15}$", message):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +71234567890.")
            return
        context.user_data["phone"] = message
        context.user_data["registration_step"] = "email"
        await update.message.reply_text("‚úâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à *email* –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.com).", parse_mode=ParseMode.MARKDOWN)
    elif step == "email":
        if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", message):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        context.user_data["email"] = message

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
        INSERT INTO users (user_id, username, full_name, skills, phone, email, balance)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            user_id,
            update.effective_user.username,
            context.user_data["full_name"],
            context.user_data["skills"],
            context.user_data["phone"],
            context.user_data["email"],
            2  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        ))
        conn.commit()
        context.user_data.clear()
        await update.message.reply_text(
            "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ SkillFlow.\n\n–í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *2 Flow-—á–∞—Å–∞*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=main_menu_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT full_name, skills, phone, email, balance FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    if user_data:
        await update.message.reply_text(
            f"üë§ *–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:*\n\n"
            f"**–§–ò–û:** {user_data[0]}\n"
            f"**–ù–∞–≤—ã–∫–∏:** {user_data[1]}\n"
            f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {user_data[2]}\n"
            f"**Email:** {user_data[3]}\n"
            f"**–ë–∞–ª–∞–Ω—Å:** {user_data[4]} Flow-—á–∞—Å–æ–≤",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
async def add_service_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["add_service_step"] = "category"
    await update.message.reply_text("üìÇ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏*\n\n–í–≤–µ–¥–∏—Ç–µ *–∫–∞—Ç–µ–≥–æ—Ä–∏—é* –≤–∞—à–µ–π —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–î–∏–∑–∞–π–Ω').", parse_mode=ParseMode.MARKDOWN)

async def add_service_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("add_service_step")
    message = update.message.text.strip()
    user_id = update.effective_user.id

    if step == "category":
        context.user_data["category"] = message
        context.user_data["add_service_step"] = "description"
        await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —É—Å–ª—É–≥—É. –ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ? –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å?", parse_mode=ParseMode.MARKDOWN)
    elif step == "description":
        context.user_data["description"] = message
        context.user_data["add_service_step"] = "cost"
        await update.message.reply_text(
            "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ *—Å—Ç–æ–∏–º–æ—Å—Ç—å* –≤–∞—à–µ–π —É—Å–ª—É–≥–∏ –≤ *Flow-—á–∞—Å–∞—Ö*.\n\n*–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?*\n"
            "–í—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç–µ, —Å–∫–æ–ª—å–∫–æ Flow-—á–∞—Å–æ–≤ —Å—Ç–æ–∏—Ç –≤–∞—à–∞ —É—Å–ª—É–≥–∞. 1 Flow-—á–∞—Å —Ä–∞–≤–µ–Ω –æ–¥–Ω–æ–º—É —á–∞—Å—É –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —É –≤–∞—Å 2 —á–∞—Å–∞ –∏–ª–∏ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –µ—ë –≤ 2 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å *2 Flow-—á–∞—Å–∞*.",
            parse_mode=ParseMode.MARKDOWN
        )
    elif step == "cost":
        try:
            cost = int(message)
            if cost <= 0:
                raise ValueError
            cursor.execute("""
            INSERT INTO services (user_id, category, description, cost)
            VALUES (?, ?, ?, ?)
            """, (
                user_id,
                context.user_data["category"],
                context.user_data["description"],
                cost
            ))
            conn.commit()
            context.user_data.pop("add_service_step", None)
            await update.message.reply_text("‚úÖ *–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –µ—ë –≤–∏–¥–µ—Ç—å –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º.", parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_keyboard())
        except ValueError:
            await update.message.reply_text("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å–ª—É–≥
async def view_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
    SELECT s.category, s.description, s.cost, u.full_name, u.user_id
    FROM services s
    JOIN users u ON s.user_id = u.user_id
    """)
    services = cursor.fetchall()
    if services:
        response = "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:*\n\n"
        for service in services:
            response += f"üë§ **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {service[3]} (ID: {service[4]})\n"
            response += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {service[0]}\n"
            response += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {service[1]}\n"
            response += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {service[2]} Flow-—á–∞—Å–æ–≤\n\n"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
async def check_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    if balance:
        await update.message.reply_text(f"üí∞ *–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance[0]} Flow-—á–∞—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ Flow-—á–∞—Å–æ–≤
async def transfer_flow_hours_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["transfer_step"] = "recipient_id"
    await update.message.reply_text("üîÑ *–ü–µ—Ä–µ–≤–æ–¥ Flow-—á–∞—Å–æ–≤*\n\n–í–≤–µ–¥–∏—Ç–µ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ Flow-—á–∞—Å—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ ID –≤ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–ª–∏ —É—Å–ª—É–≥–µ.", parse_mode=ParseMode.MARKDOWN)

async def transfer_flow_hours_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("transfer_step")
    message = update.message.text.strip()
    user_id = update.effective_user.id

    if step == "recipient_id":
        try:
            recipient_id = int(message)
            if recipient_id == user_id:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ Flow-—á–∞—Å—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
                return
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (recipient_id,))
            if not cursor.fetchone():
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            context.user_data["recipient_id"] = recipient_id
            context.user_data["transfer_step"] = "amount"
            await update.message.reply_text("üí∏ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Flow-—á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    elif step == "amount":
        try:
            amount = int(message)
            if amount <= 0:
                raise ValueError
            cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
            sender_balance = cursor.fetchone()[0]
            if amount > sender_balance:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Flow-—á–∞—Å–æ–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
                return
            recipient_id = context.user_data["recipient_id"]
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            cursor.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
            cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, recipient_id))
            # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute("""
            INSERT INTO transactions (sender_id, recipient_id, amount)
            VALUES (?, ?, ?)
            """, (user_id, recipient_id, amount))
            conn.commit()
            context.user_data.pop("transfer_step", None)
            await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} Flow-—á–∞—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {recipient_id}!", reply_markup=main_menu_keyboard())
        except ValueError:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåê *–û SkillFlow*\n\n"
        "SkillFlow ‚Äî —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞–≤—ã–∫–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥. "
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Flow-—á–∞—Å—ã –∏ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        "üí° *–ö–∞–∫ –Ω–∞—á–∞—Ç—å?*\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ Flow-—á–∞—Å–∞—Ö.\n"
        "2Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∏–º.\n"
        "3Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å Flow-—á–∞—Å–∞–º–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!",
        parse_mode=ParseMode.MARKDOWN
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    text = update.message.text.strip()

    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM services")
        total_services = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM transactions")
        total_transactions = cursor.fetchone()[0]
        await update.message.reply_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:*\n\n"
            f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
            f"üõ† *–í—Å–µ–≥–æ —É—Å–ª—É–≥:* {total_services}\n"
            f"üí∏ *–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:* {total_transactions}",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏":
        await update.message.reply_text("‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏—è–º–∏* –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(is_admin=True))
    elif text == "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º":
        await update.message.reply_text("üíº *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º–∏* –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(is_admin=True))
    elif text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏":
        await update.message.reply_text("üõ† *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏* –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(is_admin=True))
    elif text == "üí∞ –õ–æ–≥ —Å–¥–µ–ª–æ–∫":
        cursor.execute("""
        SELECT t.transaction_id, t.sender_id, t.recipient_id, t.amount, t.timestamp
        FROM transactions t
        ORDER BY t.timestamp DESC
        LIMIT 10
        """)
        transactions = cursor.fetchall()
        if transactions:
            response = "üí∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n\n"
            for tx in transactions:
                response += f"ID –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx[0]}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {tx[1]}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {tx[2]}\n–°—É–º–º–∞: {tx[3]} Flow-—á–∞—Å–æ–≤\n–î–∞—Ç–∞: {tx[4]}\n\n"
            await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu_keyboard(is_admin=True))
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await about(update, context)
    else:
        await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu_keyboard(is_admin=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if context.user_data.get("registration_step"):
        await handle_registration(update, context)
        return

    if user_id == ADMIN_ID:
        await admin_panel(update, context)
        return

    if is_registered(user_id):
        if text == "üë§ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞":
            await show_profile(update, context)
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É":
            await add_service_start(update, context)
        elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏":
            await view_services(update, context)
        elif text == "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å":
            await check_balance(update, context)
        elif text == "üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å Flow-—á–∞—Å—ã":
            await transfer_flow_hours_start(update, context)
        elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
            await about(update, context)
        elif context.user_data.get("add_service_step"):
            await add_service_process(update, context)
        elif context.user_data.get("transfer_step"):
            await transfer_flow_hours_process(update, context)
        else:
            await update.message.reply_text(
                "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=main_menu_keyboard()
            )
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
